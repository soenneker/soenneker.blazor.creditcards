@using System.Threading
@using Soenneker.Blazor.CreditCards.Abstract
@using Soenneker.Blazor.CreditCards.Dtos
@using Soenneker.Extensions.String
@using Soenneker.Extensions.Task
@using Microsoft.AspNetCore.Components.Web
@using Soenneker.Extensions.CancellationTokens
@using Soenneker.Extensions.ValueTask

@inherits Soenneker.Quark.Components.Cancellable.CancellableComponent
@implements ICreditCardComponent

@inject ICreditCardsInterop CreditCardsInterop
@inject ICardDisplayService CardDisplayService

<div class="card-container" style="margin-top: 1.5rem" @ref="_cardContainer" @attributes="ContainerAttributes" >
    <div class="credit-card @CardClass" @ref="_cardElement" style="cursor: @(FlipEnabled ? "pointer" : "default")" @onclick="HandleClick" @attributes="CardAttributes" >
        <div class="card__face card__front" style="background: @_cardStyle.Gradient" >
            <div class="card__background" ></div>
            <div class="card__pattern" ></div>
            <div class="card__chip" ></div>
            <div class="card__number card__number--@_cardType.ToLowerInvariantFast()" >
                @foreach (string block in FormatCardNumber(_cardNumber, _cardType))
                {
                    <span>@(block.IsNullOrWhiteSpace() ? "····" : block)</span>
                }
            </div>
            <div class="card__name" >@(!_cardHolderName.IsNullOrWhiteSpace() ? _cardHolderName.ToUpperInvariantFast() : "YOUR  NAME  HERE")</div>
            <div class="card__expiry" >@(!_expiryDate.IsNullOrWhiteSpace() ? _expiryDate : "••/••")</div>
            @if (_cardType.Equals("amex", StringComparison.OrdinalIgnoreCase))
            {
                <div class="card__cvc-front" >@(!_cvc.IsNullOrWhiteSpace() ? _cvc : "•••")</div>
            }
            <div class="card__brand--front" ></div>
        </div>

        <div class="card__face card__back" style="background: @_cardStyle.Gradient" >
            <div class="card__background" ></div>
            <div class="card__pattern" ></div>

            <div class="card__stripe" ></div>

            @if (!_cardType.Equals("amex", StringComparison.OrdinalIgnoreCase))
            {
                <div class="card__signature" >
                    <div class="card__cvc" >@(!_cvc.IsNullOrWhiteSpace() ? _cvc : "•••")</div>
                </div>
            }
            else
            {
                <div class="card__signature" >
                </div>
            }
            <div class="card__brand--back" ></div>
        </div>

    </div>
</div>

@code {

    [Parameter]
    public Dictionary<string, object?>? ContainerAttributes { get; set; }

    [Parameter]
    public Dictionary<string, object?>? CardAttributes { get; set; }

    [Parameter]
    public string Id { get; set; } = "card-" + Guid.NewGuid();

    private ElementReference _cardContainer;
    private ElementReference _cardElement;

    private string _cardType = "unknown";
    private string _cardIssuer = "standard";
    private string _cardProgram = "standard";
    private CardStyle _cardStyle = new();

    private string? _lastCardSignature;

    [Parameter]
    public string? CardNumber { get; set; }

    [Parameter]
    public string? CardHolderName { get; set; }

    [Parameter]
    public string? ExpiryDate { get; set; }

    [Parameter]
    public string? Cvc { get; set; }

    [Parameter]
    public string? Type { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnClick { get; set; }

    [Parameter]
    public bool FlipEnabled { get; set; } = true;

    private string _cardNumber = "";
    private string _cardHolderName = "";
    private string _expiryDate = "";
    private string _cvc = "";

    private bool _isFlipped;
    private bool _last4Only;

    private string CardClass
    {
        get
        {
            string baseClasses = CardNumber.IsNullOrEmpty() ? "card--unknown" : $"card--{_cardType} card--{_cardIssuer} card--{_cardProgram}";

            return _isFlipped ? $"{baseClasses} card--flipped" : baseClasses;
        }
    }

    protected override void OnInitialized()
    {
        // set your _cardStyle to the fallback for unknown
        _cardStyle = CardDisplayService.GetCardStyle(_cardType, _cardIssuer, _cardProgram);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CreditCardsInterop.Create(_cardContainer, _cardElement, Id, CancellationToken).NoSync();
            _initialized = true;

            // push that initial style
            await UpdateCardStyle(CancellationToken).NoSync();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (_last4Only)
            return;

        _cardNumber = CardNumber ?? "";
        _cardHolderName = CardHolderName ?? "";
        _expiryDate = ExpiryDate ?? "";
        _cvc = Cvc ?? "";

        (string type, string issuer, string program) = !Type.IsNullOrWhiteSpace() ? (Type, "standard", "standard") : CardDisplayService.DetectCardType(_cardNumber);

        var signature = $"{type}_{issuer}_{program}";

        if (_lastCardSignature != signature)
        {
            _cardType = type;
            _cardIssuer = issuer;
            _cardProgram = program;
            _cardStyle = CardDisplayService.GetCardStyle(type, issuer, program);
            _lastCardSignature = signature;

            if (_initialized)
                await UpdateCardStyle(CancellationToken).NoSync();
        }
    }


    public async Task OnAnyInput(string cardNumber, string cardholderName, string expiryDate, string cvc)
    {
        if (_last4Only)
            return;

        _cardNumber = cardNumber;
        _cardHolderName = cardholderName;
        _expiryDate = expiryDate;
        _cvc = cvc;

        (string type, string issuer, string program) = CardDisplayService.DetectCardType(_cardNumber);
        var signature = $"{type}_{issuer}_{program}";

        if (_lastCardSignature != signature)
        {
            _cardType = type;
            _cardIssuer = issuer;
            _cardProgram = program;
            _cardStyle = CardDisplayService.GetCardStyle(type, issuer, program);
            _lastCardSignature = signature;

            if (_initialized)
                await UpdateCardStyle(CancellationToken).NoSync();
        }

        StateHasChanged();
    }


    public void Flip()
    {
        if (!FlipEnabled)
            return;

        _isFlipped = !_isFlipped;

        StateHasChanged();
    }

    private async Task HandleClick(MouseEventArgs args)
    {
        if (OnClick.HasDelegate)
        {
            await OnClick.InvokeAsync(args).NoSync();
        }
        else if (FlipEnabled)
        {
            // Default behavior: flip the card if no custom OnClick handler is provided
            Flip();
        }
        // If FlipEnabled is false and no OnClick handler, the click does nothing
    }

    private bool _initialized;

    private ValueTask UpdateCardStyle(CancellationToken cancellationToken = default)
    {
        return CreditCardsInterop.UpdateCardStyle(_cardElement, _cardStyle, cancellationToken);
    }

    private static List<string> FormatCardNumber(string number, string type)
    {
        number = number.Replace(" ", "").Trim() ?? "";

        if (type.ToLowerInvariant() == "amex")
        {
            string padded = number.PadRight(15, '•');
            return
            [
                padded.Substring(0, 4),
                padded.Substring(4, 6),
                padded.Substring(10, 5)
            ];
        }
        else
        {
            string padded = number.PadRight(16, '•');
            return Enumerable.Range(0, 4).Select(i => padded.Substring(i * 4, 4)).ToList();
        }
    }

    public async ValueTask SetLast4(string last4, string type = "unknown", string issuer = "standard", string program = "standard", CancellationToken cancellationToken = default)
    {
        _last4Only = true;

        _cardNumber = last4.IsNullOrWhiteSpace() || last4.Length != 4 ? "•••• •••• •••• ••••" : $"•••• •••• •••• {last4}";

        _cardType = type;
        _cardIssuer = issuer;
        _cardProgram = program;
        _cardStyle = CardDisplayService.GetCardStyle(type, issuer, program);
        _lastCardSignature = $"{type}_{issuer}_{program}";

        CancellationToken linked = CancellationToken.Link(cancellationToken, out CancellationTokenSource? cts);

        using (cts)
        {
            if (_initialized)
                await UpdateCardStyle(linked).NoSync();
        }

        StateHasChanged();
    }

    public void ResetCardDetection()
    {
        _last4Only = false;
    }

}